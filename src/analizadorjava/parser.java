
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorjava;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  public parser() {super();}

  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\027\004\000\002\027" +
    "\005\000\002\015\006\000\002\015\005\000\002\020\004" +
    "\000\002\020\005\000\002\011\005\000\002\011\006\000" +
    "\002\012\004\000\002\012\005\000\002\021\010\000\002" +
    "\030\017\000\002\026\003\000\002\026\004\000\002\026" +
    "\003\000\002\026\004\000\002\026\003\000\002\026\004" +
    "\000\002\026\003\000\002\026\004\000\002\026\003\000" +
    "\002\026\004\000\002\026\003\000\002\026\004\000\002" +
    "\004\005\000\002\004\006\000\002\036\005\000\002\036" +
    "\006\000\002\036\003\000\002\036\004\000\002\036\004" +
    "\000\002\037\004\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\025\005\000\002\007" +
    "\005\000\002\010\007\000\002\010\007\000\002\002\011" +
    "\000\002\002\015\000\002\013\011\000\002\014\015\000" +
    "\002\003\014\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\016\011\000\002\034" +
    "\010\000\002\034\007\000\002\034\011\000\002\034\010" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\006\000\002\031\006\000\002\031\006\000\002\031\006" +
    "\000\002\041\004\000\002\041\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\032\005\001\002\000\004\002\321\001" +
    "\002\000\004\073\312\001\002\000\006\024\011\031\012" +
    "\001\002\000\004\002\000\001\002\000\004\024\011\001" +
    "\002\000\004\030\022\001\002\000\004\073\013\001\002" +
    "\000\006\013\015\015\014\001\002\000\004\073\020\001" +
    "\002\000\004\024\ufffa\001\002\000\004\013\017\001\002" +
    "\000\004\024\ufff9\001\002\000\006\013\ufff8\015\014\001" +
    "\002\000\004\013\ufff7\001\002\000\004\073\023\001\002" +
    "\000\004\047\024\001\002\000\004\024\026\001\002\000" +
    "\004\050\310\001\002\000\004\026\027\001\002\000\004" +
    "\071\030\001\002\000\004\072\031\001\002\000\004\045" +
    "\032\001\002\000\004\010\033\001\002\000\004\051\034" +
    "\001\002\000\004\052\035\001\002\000\004\074\036\001" +
    "\002\000\004\046\037\001\002\000\004\047\040\001\002" +
    "\000\036\004\066\005\052\006\062\007\054\010\057\023" +
    "\060\024\046\025\056\026\071\035\065\036\055\037\070" +
    "\040\072\073\050\001\002\000\042\004\066\005\052\006" +
    "\062\007\054\010\057\023\060\024\046\025\056\026\071" +
    "\035\065\036\055\037\070\040\072\043\uffee\050\uffee\073" +
    "\050\001\002\000\042\004\066\005\052\006\062\007\054" +
    "\010\057\023\060\024\046\025\056\026\071\035\065\036" +
    "\055\037\070\040\072\043\ufff2\050\ufff2\073\050\001\002" +
    "\000\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\043\uffcd\050\uffcd\073\uffcd\001\002\000\042\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\035\uffce\036\uffce\037\uffce\040\uffce\043" +
    "\uffce\050\uffce\073\uffce\001\002\000\042\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1\050\uffd1" +
    "\073\uffd1\001\002\000\014\004\066\005\052\006\062\007" +
    "\054\010\057\001\002\000\042\004\066\005\052\006\062" +
    "\007\054\010\057\023\060\024\046\025\056\026\071\035" +
    "\065\036\055\037\070\040\072\043\uffec\050\uffec\073\050" +
    "\001\002\000\004\044\301\001\002\000\042\004\066\005" +
    "\052\006\062\007\054\010\057\023\060\024\046\025\056" +
    "\026\071\035\065\036\055\037\070\040\072\043\uffea\050" +
    "\uffea\073\050\001\002\000\004\073\uffdb\001\002\000\042" +
    "\004\066\005\052\006\062\007\054\010\057\023\060\024" +
    "\046\025\056\026\071\035\065\036\055\037\070\040\072" +
    "\043\ufff4\050\ufff4\073\050\001\002\000\006\010\272\073" +
    "\273\001\002\000\004\045\241\001\002\000\014\004\066" +
    "\005\052\006\062\007\054\010\057\001\002\000\004\073" +
    "\234\001\002\000\014\004\066\005\052\006\062\007\054" +
    "\010\057\001\002\000\004\050\232\001\002\000\004\073" +
    "\uffda\001\002\000\004\073\230\001\002\000\004\073\225" +
    "\001\002\000\004\045\213\001\002\000\004\073\uffdc\001" +
    "\002\000\014\016\115\017\110\020\103\045\173\073\174" +
    "\001\002\000\004\045\164\001\002\000\014\004\066\005" +
    "\052\006\062\007\054\010\057\001\002\000\004\047\075" +
    "\001\002\000\042\004\066\005\052\006\062\007\054\010" +
    "\057\023\060\024\046\025\056\026\071\035\065\036\055" +
    "\037\070\040\072\043\ufff0\050\ufff0\073\050\001\002\000" +
    "\006\043\uffef\050\uffef\001\002\000\036\004\066\005\052" +
    "\006\062\007\054\010\057\023\060\024\046\025\056\026" +
    "\071\035\065\036\055\037\070\040\072\073\050\001\002" +
    "\000\004\050\077\001\002\000\004\037\100\001\002\000" +
    "\004\045\101\001\002\000\024\011\112\012\105\016\115" +
    "\017\110\020\103\021\111\022\102\061\114\073\106\001" +
    "\002\000\026\014\uff96\046\uff96\057\uff96\060\uff96\062\uff96" +
    "\063\uff96\065\uff96\066\uff96\067\uff96\070\uff96\001\002\000" +
    "\040\013\uffd6\014\uffd6\046\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\062\uffd6\063\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\001\002\000\004\046\154\001\002" +
    "\000\012\014\uffb3\046\uffb3\057\122\060\123\001\002\000" +
    "\016\062\132\063\133\065\134\066\136\067\137\070\135" +
    "\001\002\000\016\062\132\063\133\065\134\066\136\067" +
    "\137\070\135\001\002\000\040\013\uffd7\014\uffd7\046\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062" +
    "\uffd7\063\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\001\002" +
    "\000\026\014\uffb2\046\uffb2\057\122\060\123\062\uff97\063" +
    "\uff97\065\uff97\066\uff97\067\uff97\070\uff97\001\002\000\012" +
    "\014\uffb4\046\uffb4\057\122\060\123\001\002\000\026\014" +
    "\uff98\046\uff98\057\uff98\060\uff98\062\uff98\063\uff98\065\uff98" +
    "\066\uff98\067\uff98\070\uff98\001\002\000\010\011\120\012" +
    "\117\021\116\001\002\000\040\013\uffd8\014\uffd8\046\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\062" +
    "\uffd8\063\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\001\002" +
    "\000\012\014\uffaf\046\uffaf\057\122\060\123\001\002\000" +
    "\012\014\uffb0\046\uffb0\057\122\060\123\001\002\000\012" +
    "\014\uffb1\046\uffb1\057\122\060\123\001\002\000\006\014" +
    "\uffa7\046\uffa7\001\002\000\024\011\112\012\105\016\115" +
    "\017\110\020\103\021\111\022\102\061\114\073\106\001" +
    "\002\000\024\011\112\012\105\016\115\017\110\020\103" +
    "\021\111\022\102\061\114\073\106\001\002\000\006\014" +
    "\uff9f\046\uff9f\001\002\000\006\014\uffa0\046\uffa0\001\002" +
    "\000\006\014\uffa6\046\uffa6\001\002\000\006\014\uffa5\046" +
    "\uffa5\001\002\000\006\014\uffaa\046\uffaa\001\002\000\006" +
    "\014\uffa8\046\uffa8\001\002\000\016\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\073\uff9c\001\002\000\016\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\073\uff9b\001\002\000" +
    "\016\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\073\uff9a" +
    "\001\002\000\016\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\073\uff9e\001\002\000\016\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\073\uff99\001\002\000\016\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\073\uff9d\001\002\000\016" +
    "\016\115\017\110\020\103\021\142\022\102\073\143\001" +
    "\002\000\012\014\uffab\046\uffab\057\122\060\123\001\002" +
    "\000\012\014\uff97\046\uff97\057\uff97\060\uff97\001\002\000" +
    "\012\014\uffac\046\uffac\057\122\060\123\001\002\000\006" +
    "\014\uffa2\046\uffa2\001\002\000\006\014\uffa1\046\uffa1\001" +
    "\002\000\016\016\115\017\110\020\103\021\142\022\102" +
    "\073\150\001\002\000\012\014\uffad\046\uffad\057\122\060" +
    "\123\001\002\000\012\014\uffae\046\uffae\057\122\060\123" +
    "\001\002\000\006\014\uffa4\046\uffa4\001\002\000\006\014" +
    "\uffa3\046\uffa3\001\002\000\006\014\uffa9\046\uffa9\001\002" +
    "\000\004\047\155\001\002\000\036\004\066\005\052\006" +
    "\062\007\054\010\057\023\060\024\046\025\056\026\071" +
    "\035\065\036\055\037\070\040\072\073\050\001\002\000" +
    "\004\050\157\001\002\000\042\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\050\uffc5\073\uffc5" +
    "\001\002\000\010\016\115\017\110\020\103\001\002\000" +
    "\042\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\043\uffd2\050\uffd2\073\uffd2\001\002\000\004\013\163" +
    "\001\002\000\042\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\043\uffcb\050\uffcb\073\uffcb\001\002\000" +
    "\024\011\112\012\105\016\115\017\110\020\103\021\111" +
    "\022\102\061\114\073\106\001\002\000\004\046\166\001" +
    "\002\000\004\047\167\001\002\000\036\004\066\005\052" +
    "\006\062\007\054\010\057\023\060\024\046\025\056\026" +
    "\071\035\065\036\055\037\070\040\072\073\050\001\002" +
    "\000\004\050\171\001\002\000\042\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\050\uffc6\073" +
    "\uffc6\001\002\000\014\013\163\053\201\054\200\055\204" +
    "\056\177\001\002\000\014\016\115\017\110\020\103\045" +
    "\173\073\174\001\002\000\016\013\uffe4\046\uffe4\053\201" +
    "\054\200\055\204\056\177\001\002\000\004\013\176\001" +
    "\002\000\042\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\043\uffe8\050\uffe8\073\uffe8\001\002\000\014" +
    "\016\uffdd\017\uffdd\020\uffdd\045\uffdd\073\uffdd\001\002\000" +
    "\014\016\uffdf\017\uffdf\020\uffdf\045\uffdf\073\uffdf\001\002" +
    "\000\014\016\uffe0\017\uffe0\020\uffe0\045\uffe0\073\uffe0\001" +
    "\002\000\014\016\115\017\110\020\103\045\173\073\174" +
    "\001\002\000\006\013\uffe3\046\uffe3\001\002\000\014\016" +
    "\uffde\017\uffde\020\uffde\045\uffde\073\uffde\001\002\000\012" +
    "\053\201\054\200\055\204\056\177\001\002\000\006\013" +
    "\uffe1\046\uffe1\001\002\000\006\013\uffe2\046\uffe2\001\002" +
    "\000\004\046\211\001\002\000\016\013\uffe6\046\uffe6\053" +
    "\201\054\200\055\204\056\177\001\002\000\006\013\uffe5" +
    "\046\uffe5\001\002\000\024\011\112\012\105\016\115\017" +
    "\110\020\103\021\111\022\102\061\114\073\106\001\002" +
    "\000\004\046\215\001\002\000\004\047\216\001\002\000" +
    "\036\004\066\005\052\006\062\007\054\010\057\023\060" +
    "\024\046\025\056\026\071\035\065\036\055\037\070\040" +
    "\072\073\050\001\002\000\004\050\220\001\002\000\044" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\042\221\043\uffc8\050\uffc8\073\uffc8\001\002\000\004\047" +
    "\222\001\002\000\036\004\066\005\052\006\062\007\054" +
    "\010\057\023\060\024\046\025\056\026\071\035\065\036" +
    "\055\037\070\040\072\073\050\001\002\000\004\050\224" +
    "\001\002\000\042\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\043\uffc7\050\uffc7\073\uffc7\001\002\000" +
    "\006\013\226\044\227\001\002\000\042\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\050\uffd0" +
    "\073\uffd0\001\002\000\014\016\uffcc\017\uffcc\020\uffcc\045" +
    "\uffcc\073\uffcc\001\002\000\004\013\231\001\002\000\042" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\043\uffcf\050\uffcf\073\uffcf\001\002\000\004\050\ufff5\001" +
    "\002\000\042\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\043\uffd5\050\uffd5\073\uffd5\001\002\000\004" +
    "\044\235\001\002\000\004\022\236\001\002\000\004\013" +
    "\237\001\002\000\042\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\043\uffc9\050\uffc9\073\uffc9\001\002" +
    "\000\042\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\043\uffd3\050\uffd3\073\uffd3\001\002\000\024\011" +
    "\112\012\105\016\250\017\247\020\243\021\111\022\242" +
    "\061\114\073\245\001\002\000\022\014\uffb5\046\uffb5\062" +
    "\uff96\063\uff96\065\uff96\066\uff96\067\uff96\070\uff96\001\002" +
    "\000\022\014\uffb6\046\uffb6\062\uffd6\063\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\001\002\000\006\014\uffb9\046\uffb9" +
    "\001\002\000\022\014\uffba\046\uffba\062\132\063\133\065" +
    "\134\066\136\067\137\070\135\001\002\000\004\046\251" +
    "\001\002\000\022\014\uffb7\046\uffb7\062\uffd7\063\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\001\002\000\022\014\uffb8" +
    "\046\uffb8\062\uffd8\063\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\001\002\000\004\047\252\001\002\000\006\027\253" +
    "\041\254\001\002\000\004\014\265\001\002\000\024\011" +
    "\112\012\105\016\250\017\247\020\243\021\111\022\242" +
    "\061\114\073\245\001\002\000\004\050\256\001\002\000" +
    "\042\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\043\uffbf\050\uffbf\073\uffbf\001\002\000\004\014\260" +
    "\001\002\000\036\004\066\005\052\006\062\007\054\010" +
    "\057\023\060\024\046\025\056\026\071\035\065\036\055" +
    "\037\070\040\072\073\050\001\002\000\004\043\262\001" +
    "\002\000\004\013\263\001\002\000\010\027\253\041\254" +
    "\050\uffbe\001\002\000\004\050\uffbc\001\002\000\036\004" +
    "\066\005\052\006\062\007\054\010\057\023\060\024\046" +
    "\025\056\026\071\035\065\036\055\037\070\040\072\073" +
    "\050\001\002\000\004\043\267\001\002\000\004\013\270" +
    "\001\002\000\010\027\253\041\254\050\uffbd\001\002\000" +
    "\004\050\uffbb\001\002\000\004\073\uffd9\001\002\000\004" +
    "\044\274\001\002\000\004\021\275\001\002\000\004\013" +
    "\276\001\002\000\042\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\023\uffca\024\uffca\025\uffca\026\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\043\uffca\050\uffca\073\uffca\001\002" +
    "\000\006\043\ufff3\050\ufff3\001\002\000\006\043\uffe9\050" +
    "\uffe9\001\002\000\014\016\115\017\110\020\103\045\173" +
    "\073\174\001\002\000\004\013\303\001\002\000\042\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\043" +
    "\uffe7\050\uffe7\073\uffe7\001\002\000\006\043\uffeb\050\uffeb" +
    "\001\002\000\042\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\043\uffd4\050\uffd4\073\uffd4\001\002\000" +
    "\006\043\ufff1\050\ufff1\001\002\000\006\043\uffed\050\uffed" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\uffff\001" +
    "\002\000\006\013\313\015\314\001\002\000\006\024\ufffd" +
    "\031\ufffd\001\002\000\004\073\317\001\002\000\004\013" +
    "\316\001\002\000\006\024\ufffe\031\ufffe\001\002\000\006" +
    "\013\ufffc\015\314\001\002\000\004\013\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\006\015\005\027\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\007\021\006\001\001" +
    "\000\002\001\001\000\004\021\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\041\004\050\005\052\006" +
    "\044\007\043\010\042\013\072\014\040\016\046\022\063" +
    "\023\062\025\066\026\060\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\306\001\001\000" +
    "\034\002\041\004\050\005\052\006\044\007\043\010\042" +
    "\013\072\014\040\016\046\022\063\023\062\025\066\026" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\304\007\043\010\042\022\063\023" +
    "\062\025\157\001\001\000\034\002\041\004\050\005\052" +
    "\006\044\007\043\010\042\013\072\014\040\016\046\022" +
    "\063\023\062\025\066\026\303\001\001\000\002\001\001" +
    "\000\034\002\041\004\050\005\052\006\044\007\043\010" +
    "\042\013\072\014\040\016\046\022\063\023\062\025\066" +
    "\026\277\001\001\000\002\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\237\007\043" +
    "\010\042\022\063\023\062\025\157\001\001\000\002\001" +
    "\001\000\016\006\232\007\043\010\042\022\063\023\062" +
    "\025\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\171\036\174\001\001\000\002\001" +
    "\001\000\016\006\160\007\043\010\042\022\063\023\062" +
    "\025\157\001\001\000\002\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\073\001\001\000" +
    "\002\001\001\000\034\002\041\004\050\005\052\006\044" +
    "\007\043\010\042\013\072\014\040\016\046\022\063\023" +
    "\062\025\066\026\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\112\031\103\035" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\152\001\001\000\004\017\145\001" +
    "\001\000\004\017\137\001\001\000\002\001\001\000\004" +
    "\041\130\001\001\000\004\041\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\126" +
    "\001\001\000\004\041\125\001\001\000\004\041\120\001" +
    "\001\000\002\001\001\000\010\024\112\031\124\035\106" +
    "\001\001\000\010\024\112\031\123\035\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\112\035" +
    "\140\001\001\000\004\041\144\001\001\000\002\001\001" +
    "\000\004\041\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\112\035\146\001\001\000\004\041\151" +
    "\001\001\000\004\041\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\041\004\050\005\052\006\044\007\043\010\042\013" +
    "\072\014\040\016\046\022\063\023\062\025\066\026\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\112\031\164\035\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\041\004\050" +
    "\005\052\006\044\007\043\010\042\013\072\014\040\016" +
    "\046\022\063\023\062\025\066\026\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\206\040\201\001" +
    "\001\000\006\024\204\036\207\001\001\000\006\037\202" +
    "\040\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\204\036\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\206\040\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\211\040" +
    "\201\001\001\000\002\001\001\000\010\024\112\031\213" +
    "\035\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\041\004\050\005\052\006\044\007\043\010\042" +
    "\013\072\014\040\016\046\022\063\023\062\025\066\026" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\041\004\050\005\052\006\044\007" +
    "\043\010\042\013\072\014\040\016\046\022\063\023\062" +
    "\025\066\026\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\112\031\243\033\245\035\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\254\001\001\000\002\001" +
    "\001\000\012\024\112\031\243\033\256\035\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\041\004\050\005\052\006\044\007\043\010\042" +
    "\013\072\014\040\016\046\022\063\023\062\025\066\026" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\263\001\001\000\002\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\204\036\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\317\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
    public void sintax_error(Symbol s)
    {
        Wrapper wrapper = Wrapper.getInstance();
        wrapper.setError(true);
        if(wrapper.getMessage().length()>0){
        wrapper.setMessage(wrapper.getMessage()+"\nError de sintaxis en Linea: " + (s.right + 1) + "Columna: " + s.left + ". Texto: " + s.value);
        }else{
         wrapper.setMessage("TE MAMASTE WEY!!!\nError de sintaxis en Linea: " + (s.right + 1) + "Columna: " + s.left + ". Texto: " + s.value);
        }
    }
    public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
    {

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Paqueteria UnaClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Paqueteria Importacion UnaClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Paqueteria ::= PAQUETE VARIABLE PaqueteriaRuta PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Paqueteria",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Paqueteria ::= PAQUETE VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Paqueteria",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PaqueteriaRuta ::= PUNTO VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PaqueteriaRuta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PaqueteriaRuta ::= PUNTO VARIABLE PaqueteriaRuta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PaqueteriaRuta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Importacion ::= IMPORTAR VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Importacion ::= IMPORTAR VARIABLE Importacion2 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Importacion2 ::= PUNTO VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Importacion2 ::= PUNTO VARIABLE Importacion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaClase ::= PUBLICO CLASE VARIABLE ABRIR_LLAVE ClasePrincipal CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaClase",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClasePrincipal ::= PUBLICO ESTATICO HUECO PRINCIPAL ABRIR_PARENTESIS STRING CORCHETE_ABRE CORCHETE_CIERRA ARGUMENTO CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClasePrincipal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EstructuraClase ::= DarvalorVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EstructuraClase ::= DarvalorVariable EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EstructuraClase ::= Condicionif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EstructuraClase ::= Condicionif EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EstructuraClase ::= EstructuraMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EstructuraClase ::= EstructuraMientras EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EstructuraClase ::= HacerMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EstructuraClase ::= HacerMientras EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EstructuraClase ::= ElInterrumputor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EstructuraClase ::= ElInterrumputor EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EstructuraClase ::= OperacionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EstructuraClase ::= OperacionAritmetica EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OperacionAritmetica ::= InicioVar Operaciones PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OperacionAritmetica ::= VARIABLE IGUAL Operaciones PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Operaciones ::= ABRIR_PARENTESIS Operaciones CERRAR_PARENTESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Operaciones ::= ABRIR_PARENTESIS Operaciones CERRAR_PARENTESIS MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operaciones ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operaciones ::= VARIABLE MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Operaciones ::= Valores1 MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MasOperacion ::= Signos Operaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MasOperacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Signos ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Signos ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Signos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Signos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoVariable1 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoVariable1 ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoVariable1 ::= DOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoVariable2 ::= BOOLEANO STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valores1 ::= VALORINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores1 ::= VALORFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores1 ::= VALORDOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DarvalorVariable ::= PRIVADO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DarvalorVariable ::= PUBLICO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DarvalorVariable ::= PROTEGIDO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DarvalorVariable ::= ESTATICO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DarvalorVariable ::= DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DarvalorVariable2 ::= TipoVariable1 VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DarvalorVariable2 ::= TipoVariable2 VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DarvalorVariable2 ::= DarvalorVariable3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DarvalorVariable2 ::= DarvalorVariable4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InicioVar ::= TipoVariable1 VARIABLE IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InicioVar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DarvalorVariable3 ::= InicioVar Valores1 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DarvalorVariable4 ::= BOOLEANO VARIABLE IGUAL VALORBOOLEANO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DarvalorVariable4 ::= STRING VARIABLE IGUAL CADENA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicionif ::= SI ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicionif",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicionif ::= SI ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE SINO ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicionif",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EstructuraMientras ::= MIENTRAS ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraMientras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // HacerMientras ::= HACER ABRIR_LLAVE EstructuraClase CERRAR_LLAVE MIENTRAS ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HacerMientras",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CondicionFor ::= PARA ABRIR_PARENTESIS DarvalorVariable3 CentroCondicional PUNTOYCOMA SumaOResta CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondicionFor",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SumaOResta ::= VARIABLE SUMA SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SumaOResta ::= SUMA SUMA VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SumaOResta ::= RESTA RESTA VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SumaOResta ::= VARIABLE RESTA RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ElInterrumputor ::= INTERRUMPUTOR ABRIR_PARENTESIS TiposCasos CERRAR_PARENTESIS ABRIR_LLAVE Casos CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElInterrumputor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Casos ::= CASO TiposCasos DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Casos ::= DEFECTO DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Casos ::= CASO TiposCasos DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA Casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Casos ::= DEFECTO DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA Casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TiposCasos ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TiposCasos ::= CentroCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TiposCasos ::= VALORINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TiposCasos ::= VALORFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TiposCasos ::= VALORDOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TiposCasos ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CentroCondicional ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CentroCondicional ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CentroCondicional ::= VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CentroCondicional ::= NOT VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CentroCondicional ::= NOT FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CentroCondicional ::= NOT VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CentroCondicional ::= VARIABLE Comparadores VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CentroCondicional ::= VARIABLE Comparadores TipoValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CentroCondicional ::= TipoValor Comparadores VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CentroCondicional ::= TipoValor Comparadores TipoValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CentroCondicional ::= VERDADERO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CentroCondicional ::= FALSO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CentroCondicional ::= VALORBOOLEANO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CentroCondicional ::= NOT VERDADERO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CentroCondicional ::= NOT FALSO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CentroCondicional ::= NOT VALORBOOLEANO MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CentroCondicional ::= VARIABLE Comparadores VARIABLE MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CentroCondicional ::= VARIABLE Comparadores TipoValor MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CentroCondicional ::= TipoValor Comparadores VARIABLE MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CentroCondicional ::= TipoValor Comparadores TipoValor MasCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MasCondicional ::= AND CentroCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MasCondicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MasCondicional ::= OR CentroCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MasCondicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Comparadores ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Comparadores ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Comparadores ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Comparadores ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Comparadores ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Comparadores ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TipoValor ::= Valores1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TipoValor ::= VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TipoValor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
