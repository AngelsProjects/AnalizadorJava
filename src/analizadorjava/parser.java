
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorjava;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\027\004\000\002\027" +
    "\005\000\002\015\006\000\002\015\005\000\002\020\004" +
    "\000\002\020\005\000\002\011\005\000\002\011\006\000" +
    "\002\012\004\000\002\012\005\000\002\021\010\000\002" +
    "\030\017\000\002\026\003\000\002\026\004\000\002\026" +
    "\003\000\002\026\004\000\002\026\003\000\002\026\004" +
    "\000\002\026\003\000\002\026\004\000\002\026\003\000" +
    "\002\026\004\000\002\026\003\000\002\026\004\000\002" +
    "\004\005\000\002\004\006\000\002\036\005\000\002\036" +
    "\006\000\002\036\003\000\002\036\004\000\002\036\004" +
    "\000\002\037\004\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\025\005\000\002\007" +
    "\005\000\002\010\007\000\002\010\011\000\002\002\011" +
    "\000\002\002\015\000\002\013\011\000\002\014\015\000" +
    "\002\003\014\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\016\011\000\002\034" +
    "\010\000\002\034\007\000\002\034\011\000\002\034\010" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\033\005\001\002\000\004\002\305\001" +
    "\002\000\004\075\276\001\002\000\006\025\011\032\012" +
    "\001\002\000\004\002\000\001\002\000\004\025\011\001" +
    "\002\000\004\031\022\001\002\000\004\075\013\001\002" +
    "\000\006\013\015\015\014\001\002\000\004\075\020\001" +
    "\002\000\004\025\ufffa\001\002\000\004\013\017\001\002" +
    "\000\004\025\ufff9\001\002\000\006\013\ufff8\015\014\001" +
    "\002\000\004\013\ufff7\001\002\000\004\075\023\001\002" +
    "\000\004\050\024\001\002\000\004\025\026\001\002\000" +
    "\004\051\274\001\002\000\004\027\027\001\002\000\004" +
    "\072\030\001\002\000\004\073\031\001\002\000\004\046" +
    "\032\001\002\000\004\010\033\001\002\000\004\052\034" +
    "\001\002\000\004\053\035\001\002\000\004\076\036\001" +
    "\002\000\004\047\037\001\002\000\004\050\040\001\002" +
    "\000\036\004\066\005\052\006\062\007\054\010\057\024" +
    "\060\025\046\026\056\027\071\036\065\037\055\040\070" +
    "\041\072\075\050\001\002\000\042\004\066\005\052\006" +
    "\062\007\054\010\057\024\060\025\046\026\056\027\071" +
    "\036\065\037\055\040\070\041\072\044\uffee\051\uffee\075" +
    "\050\001\002\000\042\004\066\005\052\006\062\007\054" +
    "\010\057\024\060\025\046\026\056\027\071\036\065\037" +
    "\055\040\070\041\072\044\ufff2\051\ufff2\075\050\001\002" +
    "\000\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\044\uffcd\051\uffcd\075\uffcd\001\002\000\042\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\036\uffce\037\uffce\040\uffce\041\uffce\044" +
    "\uffce\051\uffce\075\uffce\001\002\000\042\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1\051\uffd1" +
    "\075\uffd1\001\002\000\014\004\066\005\052\006\062\007" +
    "\054\010\057\001\002\000\042\004\066\005\052\006\062" +
    "\007\054\010\057\024\060\025\046\026\056\027\071\036" +
    "\065\037\055\040\070\041\072\044\uffec\051\uffec\075\050" +
    "\001\002\000\004\045\265\001\002\000\042\004\066\005" +
    "\052\006\062\007\054\010\057\024\060\025\046\026\056" +
    "\027\071\036\065\037\055\040\070\041\072\044\uffea\051" +
    "\uffea\075\050\001\002\000\004\075\uffdb\001\002\000\042" +
    "\004\066\005\052\006\062\007\054\010\057\024\060\025" +
    "\046\026\056\027\071\036\065\037\055\040\070\041\072" +
    "\044\ufff4\051\ufff4\075\050\001\002\000\006\010\256\075" +
    "\257\001\002\000\004\046\225\001\002\000\014\004\066" +
    "\005\052\006\062\007\054\010\057\001\002\000\004\075" +
    "\216\001\002\000\014\004\066\005\052\006\062\007\054" +
    "\010\057\001\002\000\004\051\214\001\002\000\004\075" +
    "\uffda\001\002\000\004\075\212\001\002\000\004\075\207" +
    "\001\002\000\004\046\175\001\002\000\004\075\uffdc\001" +
    "\002\000\014\017\115\020\110\021\103\046\155\075\156" +
    "\001\002\000\004\046\146\001\002\000\014\004\066\005" +
    "\052\006\062\007\054\010\057\001\002\000\004\050\075" +
    "\001\002\000\042\004\066\005\052\006\062\007\054\010" +
    "\057\024\060\025\046\026\056\027\071\036\065\037\055" +
    "\040\070\041\072\044\ufff0\051\ufff0\075\050\001\002\000" +
    "\006\044\uffef\051\uffef\001\002\000\036\004\066\005\052" +
    "\006\062\007\054\010\057\024\060\025\046\026\056\027" +
    "\071\036\065\037\055\040\070\041\072\075\050\001\002" +
    "\000\004\051\077\001\002\000\004\040\100\001\002\000" +
    "\004\046\101\001\002\000\024\011\111\012\105\017\115" +
    "\020\110\021\103\022\112\023\102\062\114\075\106\001" +
    "\002\000\022\014\uffa2\047\uffa2\063\uffa2\064\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\001\002\000\034\013\uffd6\014" +
    "\uffd6\047\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\063\uffd6" +
    "\064\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002\000" +
    "\004\047\136\001\002\000\006\014\uffb3\047\uffb3\001\002" +
    "\000\016\063\121\064\122\066\123\067\126\070\125\071" +
    "\124\001\002\000\016\063\121\064\122\066\123\067\126" +
    "\070\125\071\124\001\002\000\034\013\uffd7\014\uffd7\047" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\063\uffd7\064\uffd7" +
    "\066\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002\000\006\014" +
    "\uffb4\047\uffb4\001\002\000\022\014\uffb2\047\uffb2\063\uffa3" +
    "\064\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\001\002\000" +
    "\022\014\uffa4\047\uffa4\063\uffa4\064\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\001\002\000\010\011\120\012\117\022" +
    "\116\001\002\000\034\013\uffd8\014\uffd8\047\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\063\uffd8\064\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\001\002\000\006\014\uffaf\047\uffaf" +
    "\001\002\000\006\014\uffb0\047\uffb0\001\002\000\006\014" +
    "\uffb1\047\uffb1\001\002\000\016\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\075\uffa8\001\002\000\016\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\075\uffa7\001\002\000\016" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\075\uffa6\001" +
    "\002\000\016\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\075\uffaa\001\002\000\016\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\075\uffa9\001\002\000\016\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\075\uffa5\001\002\000\016\017" +
    "\115\020\110\021\103\022\131\023\102\075\132\001\002" +
    "\000\006\014\uffab\047\uffab\001\002\000\006\014\uffa3\047" +
    "\uffa3\001\002\000\006\014\uffac\047\uffac\001\002\000\016" +
    "\017\115\020\110\021\103\022\131\023\102\075\135\001" +
    "\002\000\006\014\uffad\047\uffad\001\002\000\006\014\uffae" +
    "\047\uffae\001\002\000\004\050\137\001\002\000\036\004" +
    "\066\005\052\006\062\007\054\010\057\024\060\025\046" +
    "\026\056\027\071\036\065\037\055\040\070\041\072\075" +
    "\050\001\002\000\004\051\141\001\002\000\042\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\044\uffc5" +
    "\051\uffc5\075\uffc5\001\002\000\010\017\115\020\110\021" +
    "\103\001\002\000\042\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\044\uffd2\051\uffd2\075\uffd2\001\002" +
    "\000\004\013\145\001\002\000\042\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\051\uffcb\075" +
    "\uffcb\001\002\000\024\011\111\012\105\017\115\020\110" +
    "\021\103\022\112\023\102\062\114\075\106\001\002\000" +
    "\004\047\150\001\002\000\004\050\151\001\002\000\036" +
    "\004\066\005\052\006\062\007\054\010\057\024\060\025" +
    "\046\026\056\027\071\036\065\037\055\040\070\041\072" +
    "\075\050\001\002\000\004\051\153\001\002\000\042\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\044" +
    "\uffc6\051\uffc6\075\uffc6\001\002\000\014\013\145\054\163" +
    "\055\162\056\166\057\161\001\002\000\014\017\115\020" +
    "\110\021\103\046\155\075\156\001\002\000\016\013\uffe4" +
    "\047\uffe4\054\163\055\162\056\166\057\161\001\002\000" +
    "\004\013\160\001\002\000\042\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8\051\uffe8\075\uffe8" +
    "\001\002\000\014\017\uffdd\020\uffdd\021\uffdd\046\uffdd\075" +
    "\uffdd\001\002\000\014\017\uffdf\020\uffdf\021\uffdf\046\uffdf" +
    "\075\uffdf\001\002\000\014\017\uffe0\020\uffe0\021\uffe0\046" +
    "\uffe0\075\uffe0\001\002\000\014\017\115\020\110\021\103" +
    "\046\155\075\156\001\002\000\006\013\uffe3\047\uffe3\001" +
    "\002\000\014\017\uffde\020\uffde\021\uffde\046\uffde\075\uffde" +
    "\001\002\000\012\054\163\055\162\056\166\057\161\001" +
    "\002\000\006\013\uffe1\047\uffe1\001\002\000\006\013\uffe2" +
    "\047\uffe2\001\002\000\004\047\173\001\002\000\016\013" +
    "\uffe6\047\uffe6\054\163\055\162\056\166\057\161\001\002" +
    "\000\006\013\uffe5\047\uffe5\001\002\000\024\011\111\012" +
    "\105\017\115\020\110\021\103\022\112\023\102\062\114" +
    "\075\106\001\002\000\004\047\177\001\002\000\004\050" +
    "\200\001\002\000\036\004\066\005\052\006\062\007\054" +
    "\010\057\024\060\025\046\026\056\027\071\036\065\037" +
    "\055\040\070\041\072\075\050\001\002\000\004\051\202" +
    "\001\002\000\044\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\203\044\uffc8\051\uffc8\075\uffc8\001" +
    "\002\000\004\050\204\001\002\000\036\004\066\005\052" +
    "\006\062\007\054\010\057\024\060\025\046\026\056\027" +
    "\071\036\065\037\055\040\070\041\072\075\050\001\002" +
    "\000\004\051\206\001\002\000\042\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7\051\uffc7\075" +
    "\uffc7\001\002\000\006\013\210\045\211\001\002\000\042" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\051\uffd0\075\uffd0\001\002\000\014\017\uffcc\020" +
    "\uffcc\021\uffcc\046\uffcc\075\uffcc\001\002\000\004\013\213" +
    "\001\002\000\042\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\044\uffcf\051\uffcf\075\uffcf\001\002\000" +
    "\004\051\ufff5\001\002\000\042\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\044\uffd5\051\uffd5\075\uffd5" +
    "\001\002\000\004\045\217\001\002\000\004\074\220\001" +
    "\002\000\004\023\221\001\002\000\004\074\222\001\002" +
    "\000\004\013\223\001\002\000\042\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\051\uffc9\075" +
    "\uffc9\001\002\000\042\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\051\uffd3\075\uffd3\001\002" +
    "\000\024\011\111\012\105\017\234\020\233\021\227\022" +
    "\112\023\226\062\114\075\231\001\002\000\022\014\uffb5" +
    "\047\uffb5\063\uffa2\064\uffa2\066\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\001\002\000\022\014\uffb6\047\uffb6\063\uffd6\064\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002\000\006\014" +
    "\uffb9\047\uffb9\001\002\000\022\014\uffba\047\uffba\063\121" +
    "\064\122\066\123\067\126\070\125\071\124\001\002\000" +
    "\004\047\235\001\002\000\022\014\uffb7\047\uffb7\063\uffd7" +
    "\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002\000" +
    "\022\014\uffb8\047\uffb8\063\uffd8\064\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\001\002\000\004\050\236\001\002\000" +
    "\006\030\237\042\240\001\002\000\004\014\251\001\002" +
    "\000\024\011\111\012\105\017\234\020\233\021\227\022" +
    "\112\023\226\062\114\075\231\001\002\000\004\051\242" +
    "\001\002\000\042\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\044\uffbf\051\uffbf\075\uffbf\001\002\000" +
    "\004\014\244\001\002\000\036\004\066\005\052\006\062" +
    "\007\054\010\057\024\060\025\046\026\056\027\071\036" +
    "\065\037\055\040\070\041\072\075\050\001\002\000\004" +
    "\044\246\001\002\000\004\013\247\001\002\000\010\030" +
    "\237\042\240\051\uffbe\001\002\000\004\051\uffbc\001\002" +
    "\000\036\004\066\005\052\006\062\007\054\010\057\024" +
    "\060\025\046\026\056\027\071\036\065\037\055\040\070" +
    "\041\072\075\050\001\002\000\004\044\253\001\002\000" +
    "\004\013\254\001\002\000\010\030\237\042\240\051\uffbd" +
    "\001\002\000\004\051\uffbb\001\002\000\004\075\uffd9\001" +
    "\002\000\004\045\260\001\002\000\004\022\261\001\002" +
    "\000\004\013\262\001\002\000\042\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\044\uffca\051\uffca\075" +
    "\uffca\001\002\000\006\044\ufff3\051\ufff3\001\002\000\006" +
    "\044\uffe9\051\uffe9\001\002\000\014\017\115\020\110\021" +
    "\103\046\155\075\156\001\002\000\004\013\267\001\002" +
    "\000\042\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\044\uffe7\051\uffe7\075\uffe7\001\002\000\006\044" +
    "\uffeb\051\uffeb\001\002\000\042\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\044\uffd4\051\uffd4\075\uffd4" +
    "\001\002\000\006\044\ufff1\051\ufff1\001\002\000\006\044" +
    "\uffed\051\uffed\001\002\000\004\002\ufff6\001\002\000\004" +
    "\002\uffff\001\002\000\006\013\277\015\300\001\002\000" +
    "\006\025\ufffd\032\ufffd\001\002\000\004\075\303\001\002" +
    "\000\004\013\302\001\002\000\006\025\ufffe\032\ufffe\001" +
    "\002\000\006\013\ufffc\015\300\001\002\000\004\013\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\015\005\027\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\007\021\006\001\001" +
    "\000\002\001\001\000\004\021\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\041\004\050\005\052\006" +
    "\044\007\043\010\042\013\072\014\040\016\046\022\063" +
    "\023\062\025\066\026\060\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\272\001\001\000" +
    "\034\002\041\004\050\005\052\006\044\007\043\010\042" +
    "\013\072\014\040\016\046\022\063\023\062\025\066\026" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\270\007\043\010\042\022\063\023" +
    "\062\025\141\001\001\000\034\002\041\004\050\005\052" +
    "\006\044\007\043\010\042\013\072\014\040\016\046\022" +
    "\063\023\062\025\066\026\267\001\001\000\002\001\001" +
    "\000\034\002\041\004\050\005\052\006\044\007\043\010" +
    "\042\013\072\014\040\016\046\022\063\023\062\025\066" +
    "\026\263\001\001\000\002\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\223\007\043" +
    "\010\042\022\063\023\062\025\141\001\001\000\002\001" +
    "\001\000\016\006\214\007\043\010\042\022\063\023\062" +
    "\025\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\153\036\156\001\001\000\002\001" +
    "\001\000\016\006\142\007\043\010\042\022\063\023\062" +
    "\025\141\001\001\000\002\001\001\000\034\002\041\004" +
    "\050\005\052\006\044\007\043\010\042\013\072\014\040" +
    "\016\046\022\063\023\062\025\066\026\073\001\001\000" +
    "\002\001\001\000\034\002\041\004\050\005\052\006\044" +
    "\007\043\010\042\013\072\014\040\016\046\022\063\023" +
    "\062\025\066\026\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\112\031\103\035" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\132\001\001\000" +
    "\004\017\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\112\035\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\112\035\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\041\004\050\005\052\006\044\007\043" +
    "\010\042\013\072\014\040\016\046\022\063\023\062\025" +
    "\066\026\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\112\031\146\035\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\041\004\050\005\052\006\044\007\043\010\042\013\072" +
    "\014\040\016\046\022\063\023\062\025\066\026\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\170" +
    "\040\163\001\001\000\006\024\166\036\171\001\001\000" +
    "\006\037\164\040\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\166\036\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\170\040\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\173\040\163\001\001\000\002\001\001\000\010\024" +
    "\112\031\175\035\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\041\004\050\005\052\006\044\007" +
    "\043\010\042\013\072\014\040\016\046\022\063\023\062" +
    "\025\066\026\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\041\004\050\005\052" +
    "\006\044\007\043\010\042\013\072\014\040\016\046\022" +
    "\063\023\062\025\066\026\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\112\031" +
    "\227\033\231\035\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\240\001\001\000\002\001\001\000" +
    "\012\024\112\031\227\033\242\035\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\041\004\050\005\052\006\044\007\043\010\042\013\072" +
    "\014\040\016\046\022\063\023\062\025\066\026\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\247" +
    "\001\001\000\002\001\001\000\034\002\041\004\050\005" +
    "\052\006\044\007\043\010\042\013\072\014\040\016\046" +
    "\022\063\023\062\025\066\026\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\166\036\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\303\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
    public void sintax_error(Symbol s)
    {
        Wrapper wrapper = Wrapper.getInstance();
        wrapper.setError(true);
        if(wrapper.getMessage().length()>0){
        wrapper.setMessage(wrapper.getMessage()+"\nError de sintaxis en Linea: " + (s.right + 1) + "Columna: " + s.left + ". Texto: " + s.value);
        }else{
         wrapper.setMessage("TE MAMASTE WEY!!!\nError de sintaxis en Linea: " + (s.right + 1) + "Columna: " + s.left + ". Texto: " + s.value);
        }
    }
    public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
    {

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Paqueteria UnaClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Paqueteria Importacion UnaClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Paqueteria ::= PAQUETE VARIABLE PaqueteriaRuta PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Paqueteria",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Paqueteria ::= PAQUETE VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Paqueteria",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PaqueteriaRuta ::= PUNTO VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PaqueteriaRuta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PaqueteriaRuta ::= PUNTO VARIABLE PaqueteriaRuta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PaqueteriaRuta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Importacion ::= IMPORTAR VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Importacion ::= IMPORTAR VARIABLE Importacion2 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Importacion2 ::= PUNTO VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Importacion2 ::= PUNTO VARIABLE Importacion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Importacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaClase ::= PUBLICO CLASE VARIABLE ABRIR_LLAVE ClasePrincipal CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaClase",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClasePrincipal ::= PUBLICO ESTATICO HUECO PRINCIPAL ABRIR_PARENTESIS STRING CORCHETE_ABRE CORCHETE_CIERRA ARGUMENTO CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClasePrincipal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EstructuraClase ::= DarvalorVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EstructuraClase ::= DarvalorVariable EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EstructuraClase ::= Condicionif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EstructuraClase ::= Condicionif EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EstructuraClase ::= EstructuraMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EstructuraClase ::= EstructuraMientras EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EstructuraClase ::= HacerMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EstructuraClase ::= HacerMientras EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EstructuraClase ::= ElInterrumputor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EstructuraClase ::= ElInterrumputor EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EstructuraClase ::= OperacionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EstructuraClase ::= OperacionAritmetica EstructuraClase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraClase",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OperacionAritmetica ::= InicioVar Operaciones PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OperacionAritmetica ::= VARIABLE IGUAL Operaciones PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Operaciones ::= ABRIR_PARENTESIS Operaciones CERRAR_PARENTESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Operaciones ::= ABRIR_PARENTESIS Operaciones CERRAR_PARENTESIS MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operaciones ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operaciones ::= VARIABLE MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Operaciones ::= Valores1 MasOperacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MasOperacion ::= Signos Operaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MasOperacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Signos ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Signos ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Signos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Signos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Signos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoVariable1 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoVariable1 ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoVariable1 ::= DOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoVariable2 ::= BOOLEANO STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoVariable2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valores1 ::= VALORINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores1 ::= VALORFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores1 ::= VALORDOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valores1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DarvalorVariable ::= PRIVADO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DarvalorVariable ::= PUBLICO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DarvalorVariable ::= PROTEGIDO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DarvalorVariable ::= ESTATICO DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DarvalorVariable ::= DarvalorVariable2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DarvalorVariable2 ::= TipoVariable1 VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DarvalorVariable2 ::= TipoVariable2 VARIABLE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DarvalorVariable2 ::= DarvalorVariable3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DarvalorVariable2 ::= DarvalorVariable4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InicioVar ::= TipoVariable1 VARIABLE IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InicioVar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DarvalorVariable3 ::= InicioVar Valores1 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DarvalorVariable4 ::= BOOLEANO VARIABLE IGUAL VALORBOOLEANO PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DarvalorVariable4 ::= STRING VARIABLE IGUAL COMILLA CADENA COMILLA PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DarvalorVariable4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicionif ::= SI ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicionif",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicionif ::= SI ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE SINO ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicionif",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EstructuraMientras ::= MIENTRAS ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EstructuraMientras",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // HacerMientras ::= HACER ABRIR_LLAVE EstructuraClase CERRAR_LLAVE MIENTRAS ABRIR_PARENTESIS CentroCondicional CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HacerMientras",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CondicionFor ::= PARA ABRIR_PARENTESIS DarvalorVariable3 CentroCondicional PUNTOYCOMA SumaOResta CERRAR_PARENTESIS ABRIR_LLAVE EstructuraClase CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondicionFor",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SumaOResta ::= VARIABLE SUMA SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SumaOResta ::= SUMA SUMA VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SumaOResta ::= RESTA RESTA VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SumaOResta ::= VARIABLE RESTA RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SumaOResta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ElInterrumputor ::= INTERRUMPUTOR ABRIR_PARENTESIS TiposCasos CERRAR_PARENTESIS ABRIR_LLAVE Casos CERRAR_LLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElInterrumputor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Casos ::= CASO TiposCasos DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Casos ::= DEFECTO DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Casos ::= CASO TiposCasos DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA Casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Casos ::= DEFECTO DOSPUNTOS EstructuraClase ROMPER PUNTOYCOMA Casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TiposCasos ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TiposCasos ::= CentroCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TiposCasos ::= VALORINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TiposCasos ::= VALORFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TiposCasos ::= VALORDOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TiposCasos ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposCasos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CentroCondicional ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CentroCondicional ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CentroCondicional ::= VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CentroCondicional ::= NOT VERDADERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CentroCondicional ::= NOT FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CentroCondicional ::= NOT VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CentroCondicional ::= VARIABLE Comparadores VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CentroCondicional ::= VARIABLE Comparadores TipoValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CentroCondicional ::= TipoValor Comparadores VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CentroCondicional ::= TipoValor Comparadores TipoValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CentroCondicional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Comparadores ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Comparadores ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Comparadores ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Comparadores ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Comparadores ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Comparadores ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TipoValor ::= Valores1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TipoValor ::= VALORBOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TipoValor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoValor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
